'use strict';

var gphoto = require('../gphoto');
var should = require('chai').should();
var expect = require('chai').expect;

var fs = require('fs');

describe('gphoto', function() {

  it('should list cameras', function(done) {
    gphoto.getCameras(function(cameras){ 
      console.log('Cameras:', cameras);
      if (cameras.length === 0){
        console.warn(
          'Connect a camera to properly test this.' +
          'If you have and see this message, then the test failed.'
        );
        cameras.should.be.a('array').with.length(0);
      } else {
        cameras.should.be.a('array').with.length.above(0);
        for (var i = cameras.length - 1; i >= 0; i--) {
          var camera = cameras[i];
          camera.should.have.property('name').be.a('string');
          camera.should.have.property('port').be.a('object');
          camera.should.have.property('portId').be.a('string');
        }
      }
      done();
    });
  });

});

describe('Camera', function() {
  var camera;
  before(function(done) {
    gphoto.getCameras(function(cameras){
      if (cameras.length > 0) {
        camera = cameras.pop();
        done();
      }
    });
  });

  it('should catpure a photo via streams', function(done) {
    this.timeout(20000);
    camera.optionsOnce(
      [
        ['/main/imgsettings/imageformat', 3], // 5: Small Normal JPEG, 6: Raw + JPEG, 7: Raw
        ['/main/imgsettings/iso', '200'],
        ['/main/imgsettings/whitebalance', 'Daylight'],
        ['/main/capturesettings/shutterspeed', '1/13']
      ], function(cam){
        var photo = cam.capture();
        var ws = fs.createWriteStream('/tmp/testPhoto.jpeg');

        var startingBits = '';
        photo.on('data', function(chunk) {
          if (startingBits.length < 4) {
            startingBits += chunk.toString('hex', 0, 4);
          }
        });
        ws.on('finish', function() {
          // Check valid JPEG
          expect(startingBits).match(/^ffd8.*/i);
          // Check valid CR2
          // 49492a00
          done();
        });
        photo.pipe(ws);
      }
    );
  });


  it.skip('should catpure a quick preview via streams', function(done) {
    this.timeout(10000);
    var photo = camera.preview();
    var ws = fs.createWriteStream('./testPhoto.jpeg');
    ws.on('finish', function() {
      done();
    });
    photo.pipe(ws);
  });

});
