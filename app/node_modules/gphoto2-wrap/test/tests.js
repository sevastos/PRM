'use strict';

var tmpDir = '/tmp/';

var gphoto = require('../gphoto');
var should = require('chai').should();
var expect = require('chai').expect;
var __ = require('lodash');
var fs = require('fs');

var defaultCameraConfig = [
  ['/main/imgsettings/imageformat', 4], // JPEG
  ['/main/imgsettings/iso', '1000'],
  ['/main/imgsettings/whitebalance', 'Daylight'],
  ['/main/capturesettings/shutterspeed', '1/13']
];

describe('gphoto', function() {
  this.timeout(5000);
  this.slow(500);

  it('can list cameras', function(done) {
    gphoto.getCameras(function(cameras){ 
      if (cameras.length === 0){
        console.warn(
          'Connect a camera to properly test this.' +
          'If you have and see this message, then the test failed.'
        );
        cameras.should.be.a('array').with.length(0);
      } else {
        cameras.should.be.a('array').with.length.above(0);
        for (var i = cameras.length - 1; i >= 0; i--) {
          var camera = cameras[i];
          camera.should.have.property('name').be.a('string');
          camera.should.have.property('port').be.a('object');
          camera.should.have.property('portId').be.a('string');
        }
      }
      done();
    });
  });

});

describe('Camera', function() {
  var camera;
  before(function(done) {
    gphoto.getCameras(function(cameras){
      if (cameras.length > 0) {
        camera = cameras.pop();
        done();
      }
    });
  });

  beforeEach(function (done) {
    camera.setOptions(defaultCameraConfig, done);
  });

  it.only('can get list of all options', function(done) {
    this.timeout(10000);
    this.slow(3000);
    camera.listFullOptions(function(config){
      for (var key in config) {
        var opt = config[key];
        expect(opt).to.have.property('key');
        expect(opt).to.have.property('label');
        expect(opt).to.have.property('type');
      }
      done();
    });
  });

  it('can catpure and save a photo via streams', function(done) {
    this.timeout(20000);
    this.slow(7000);
    camera.optionsOnce(
      [
        ['/main/imgsettings/imageformat', 3], // 5: Small Normal JPEG, 6: Raw + JPEG, 7: Raw
        ['/main/imgsettings/iso', '200'],
        ['/main/imgsettings/whitebalance', 'Daylight'],
        ['/main/capturesettings/shutterspeed', '1/13']
      ], function(cam){
        var photo = cam.captureStream();
        var ws = fs.createWriteStream(tmpDir + 'testPhoto.jpeg');

        var startingBits = '';
        photo.on('data', function(chunk) {
          if (startingBits.length < 4) {
            startingBits += chunk.toString('hex', 0, 4);
          }
        });
        ws.on('finish', function() {
          // Check valid JPEG
          expect(startingBits).match(/^ffd8.*/i);
          // Check valid CR2
          // 49492a00
          done();
        });
        photo.pipe(ws);
      }
    );
  });

  describe('can handle temporal options', function() {
    this.timeout(15000);
    this.slow(7000);

    var originalOptsFixture = [
      ['/main/imgsettings/imageformat', 'Small Normal JPEG'], // 5
      ['/main/imgsettings/iso', '200']
    ];

    beforeEach(function(doneBefore) {
      camera.setOptions(originalOptsFixture, doneBefore);
    });

    it('and restore to original config afterwards', function(done) {
      function checkSettings(done) {
        var optKeys = __.map(originalOptsFixture, function(opt){ return opt[0]; });
        camera.getOptions(optKeys, function(opts){
          expect(opts.length).to.equal(originalOptsFixture.length);
          expect(opts).to.eql(originalOptsFixture);
          done();
        });
      }

      camera.optionsOnce(
        [
          ['/main/imgsettings/imageformat', 3], //3: Medium Normal JPEG, 5: Small Normal JPEG, 6: Raw + JPEG, 7: Raw
          ['/main/imgsettings/iso', '400'],
          ['/main/imgsettings/whitebalance', 'Daylight'],
          ['/main/capturesettings/shutterspeed', '1/13']
        ], function(cam){
          var photo = cam.captureStream();

          var startingBits = '';
          photo.on('data', function(chunk) {
            if (startingBits.length < 4) {
              startingBits += chunk.toString('hex', 0, 4);
            }
          });
          photo.on('end', function() {
            // Check valid JPEG
            expect(startingBits).match(/^ffd8.*/i);
            // Check settings
            checkSettings(done);
          });
        }
      );
    });
  }); /* /TEMPORAL OPTS */

  it.skip('can capture a quick preview via streams', function(done) {
    this.timeout(10000);
    this.slow(3000);
    var photo = camera.preview();
    var ws = fs.createWriteStream(tmpDir + 'testPreviewPhoto.jpeg');

    // var pictureTube = require('picture-tube');
    // var tube = pictureTube();
    // tube.pipe(process.stdout);
    // tube.on('finish', function() {
    //   done();
    // });
    // photo.pipe(tube);
    ws.on('finish', function() {
      done();
    });
    photo.pipe(ws);
  });

});
