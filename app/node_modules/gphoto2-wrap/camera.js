'use strict';

var __ = require('lodash');
var debug = require('debug')('Camera');
var async = require('async');

var proc = require('./lib/proc');

/**
 * @param {String} name
 * @param {Object} port {type: (usb|serial), [bus: ..., dev: ...]}
 */
function Camera(name, port){
  if (typeof port === 'string') {
    port = Camera.portFromString(port);
  }
  this.name = name;
  this.port = port;

  if (port.type === 'usb') {
    this.portId = port.type + ':' + port.bus + ',' + port.dev;
  }
}

Camera.prototype.toString = function() {
  return '[' + this.name + ', Port:' + this.portId + ']';
};

Camera.portFromString = function(portStr) {
  portStr = portStr.split(':');
  return {
    type: portStr.shift(),
    bus: portStr[0].split(',')[0],
    dev: portStr[0].split(',')[1]
  };
};

/*****************/
/* Options chain */
/*****************/
/**
 * One-time options.
 *
 * - Gets & saves internally old config values
 * - Sets temporal values to camera
 * - Camera.pipe reverts to original values
 *
 * @param  {Object}   opts Array of (arrays|strings)
                      opts = [
                        [key, value]+
                      ]
 * @param  {Function} next @(cameraWithTemporalOpts)
 */
Camera.prototype.optionsOnce = function(opts, next) {
  //var _this = __.clone(this, true); // Create new instance for temporal options
  var _this = this;

  if (!__.isArray(opts[0])) {
    opts = [opts];
  }

  var cmd = '';

  opts.forEach(function(option){
    cmd += ' --get-config ' + option[0] +
           ' --set-config ' + option[0] +
              '=' + (isNaN(option[1])?'"'+option[1]+'"':option[1]);
  });

  debug('optionsOnce', 'Gettings old vals & setting one-time opts:', opts);
  debug('optionsOnce', 'cmd:', cmd);
  //proc.gmd
  this.cmd(cmd.trim(), function(res){
    var match, r = /^Current:(.*)$/gm;
    _this.oldSettings = [];
    debug('optionsOnce', 'Saving original settings vals'); 
    while (match = r.exec(res), match !== null) {
      var configKey = opts[_this.oldSettings.length][0];
      var configVal = match[1].trim();
      debug('optionsOnce', 'Found:', configKey, ', Val:', configVal);
      _this.oldSettings.push([configKey, configVal]);
    }
    debug('optionsOnce', 'Done getting & setting one-time options');
    next(_this);
  });
  return this;
};

Camera.prototype.cmd = function(cmd, next, env) {
  cmd = this.applyTemporalOptions(cmd);
  cmd = this.applyCommonCmd(cmd);
  debug('Camera.cmd', 'cmd:', cmd);
  return proc.gmd(cmd, next, env);
};

Camera.prototype.pipe = function(cmd, next, env) {
  cmd = this.applyTemporalOptions(cmd);
  cmd = this.applyCommonCmd(cmd);
  debug('Camera.pipe', 'cmd:', cmd);
  return proc.gpipe(cmd, next, env);
};

Camera.prototype.applyCommonCmd = function(cmd) {
  if (this.portId) {
    cmd = '--port "' + this.portId + '" ' + cmd;
  } else if (this.name) {
    cmd = '--camera "' + this.name + '" ' + cmd;
  }
  return cmd;
};

/*********************/
/**     OPTIONS     **/
/*********************/

Camera.prototype.applyTemporalOptions = function(cmd) {
  cmd = this.applyOptions('old', cmd);
  return cmd;
};

/**
 * Apply settings to cmd
 * @param  {String} type (old|new) Settings
 * @param  {String} cmd
 * @return {String}      Cmd with applied settings
 */
Camera.prototype.applyOptions = function(type, cmd) {
  var optName = type + 'Settings';
  var option, val;
  this[optName] = this[optName] || [];

  debug('applyOptions', type, '{x} options'.replace('{x}', this[optName].length));
  for (var x = 0; x < this[optName].length; x++) {
    option = this[optName][x];
    val = (isNaN(option[1]) ? '"'+option[1]+'"' : option[1]);
    cmd = (type === 'old'?cmd + ' ':'') +
          '--set-config ' + option[0] + '=' + val +
          (type === 'new'?' ' + cmd:'');
  }
  return cmd;
};

Camera.prototype.getFullOptions = function(opts, next){
  debug('getOptions', opts);
  if (!__.isArray(opts)){
    opts = [opts];
  }

  var cmd = [];
  opts.forEach(function(opt){
    cmd.push('--get-config ' + opt);
  });

  var config = {};
  // proc.gmd
  this.cmd(cmd.join(' '), function(res){
    var re = /^Label:\ /gm;
    var configItems = __.compact(res.split(re));
    for (var i = 0; i < configItems.length; i++) {
      var configKey = opts[__.keys(config).length];
      var lines = __.compact(configItems[i].split('\n'));
      config[configKey] = {
        key: configKey,
        label: lines.shift(),
        type: lines.shift().replace(/Type: ?/, '').toLowerCase().trim(),
        value: lines.shift().replace(/Current: ?/, '').trim()
      };
      // choices
      var choices = {};
      for (var x = 0; x < lines.length; x++) {
        if (lines[x].indexOf('Choice:') === -1) {
          continue;
        }
        var line = lines[x].replace(/Choice: ?/, '').trim();
        var choiceData = /([^ ]+)\ (.*)/mg.exec(line).slice(1);
        choices[choiceData[0]] = choiceData[1];
      }
      config[configKey].choices = choices;
    }
    next(config);
  });
};

/**
 * Retrieve config options
 * @param  {Mixed}    opts Array or string
 * @param  {Function} next
 */
Camera.prototype.getOptions = function(opts, next){
  debug('getOptions', opts);
  if (!__.isArray(opts)){
    opts = [opts];
  }

  var cmd = [];
  opts.forEach(function(opt){
    cmd.push('--get-config ' + opt);
  });

  var config = [];
  // proc.gmd
  this.cmd(cmd.join(' '), function(res){
    var match, r = /^Current:(.*)$/gm;
    while (match = r.exec(res), match !== null) {
      var configKey = opts[config.length];
      var configVal = match[1].trim();
      debug('getOptions', 'Found:', configKey, ', Val:', configVal);
      config.push([configKey, configVal]);
    }    
    next(config);
  });
};

/**
 * Set config options
 * @param  {Array}    opts Array of [arrays or strings]
 * @param  {Function} next
 */
Camera.prototype.setOptions = function(opts, next){
  debug('setOptions', opts);

  if (!__.isArray(opts[0])){
    opts = [opts];
  }

  var cmd = [];
  opts.forEach(function(opt){
    var val = (isNaN(opt[1]) ? '"'+opt[1]+'"' : opt[1]);
    cmd.push('--set-config ' + opt[0] + '=' + val);
  });

  debug('setOptions', 'cmd', cmd);
  //proc.gmd
  this.cmd(cmd.join(' '), function(){
    debug('setOptions', 'done');
    next();
  });
};


Camera.prototype.listOptions = function(next) {
  debug('listOptions');
  this.cmd('--list-config', function(opts){
    opts = __.compact(opts.split('\n'));
    debug('listOptions', '#' + opts.length);
    next(opts);
  });
};

Camera.prototype.listFullOptions = function(next) {
  var _this = this;
  this.listOptions(function(options){
    _this.getFullOptions(options, function(optionsFull){
      next(optionsFull);
    });
  });
};

/************************/
/* Camera Functionality */
/************************/


Camera.prototype.captureStream = function() { //Stream
  return this.pipe(' --stdout --capture-image-and-download');
};

// Camera.prototype.capture = function(next) {
//   next(this.gpipe('--capture-image-and-download --stdout'));
// };

// Camera.prototype.preview = function() {
//   return this.pipe('--stdout --capture-preview');
// };

Camera.prototype.previewFeed = function(next) {
  return this.pipe('--stdout --capture-movie', next);
};






module.exports = Camera;
